RE_VIDEO_ID     = Regex('(?<=video_id=)[0-9]+')
RE_SHOW_EPISODE = Regex('(.*) *(Del) *([0-9]+) *(.*)', Regex.IGNORECASE)

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):
    # Determine id of episode
    try:
        id = RE_VIDEO_ID.search(url).group(0)
    except:
        raise Ex.MediaNotAvailable

    try:
        xmlElement = XML.ElementFromURL("http://premium.tv4play.se/api/web/asset/" + id)
    except:
        raise Ex.MediaNotAvailable

    try:
        title = xmlElement.xpath("//asset//title/text()")[0]
    except:
        title = None
             
    try:
        match   = RE_SHOW_EPISODE.search(xmlElement.xpath(title)).groups()
        show    = match[0]
        episode = int(match[2])
    except:
        show    = None
        episode = None

    try:  
        summary = xmlElement.xpath("//asset//description/text()")[0]
    except:
        summary = None

    try:    
        thumb = "http://prima.tv4play.se/multimedia/vman/" + xmlElement.xpath("//asset//imageUrl/text()")[0]
    except:
        thumb = None  

    try:
        air_date = xmlElement.xpath("//asset//liveBroadcastTime/text()")[0].split('T')[0]
        air_date = Datetime.ParseDate(air_date).date()
    except:
        air_date = None

    try:
        duration = xmlElement.xpath("//asset//duration/text()")[0]
        duration = int(duration) * 1000 #millisecs
    except:
        duration = None

    if show:  
        return EpisodeObject(
            show = show,
            title = title,
            index = episode,
            summary = summary,
            duration = duration,
            thumb = thumb,
            originally_available_at = air_date
        )
    else:
        return VideoClipObject(
            title = title,
            summary = summary,
            duration = duration,
            thumb = thumb,
            originally_available_at = air_date
        )

####################################################################################################
def MediaObjectsForURL(url):
    # Determine id of episode
    try:
        id = RE_VIDEO_ID.search(url).group(0)
    except:
        raise Ex.MediaNotAvailable

    return [
        MediaObject(
            container               = 'mpegts',
            video_codec             = VideoCodec.H264,
            audio_codec             = AudioCodec.AAC, 
            audio_channels          = 2,
            optimized_for_streaming = True,
            parts                   = [
                PartObject(
                    key = HTTPLiveStreamURL(Callback(PlayVideo, id = id))
                )
            ]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(id):
    xmlElement = None
    
    try:
        # Try get info on HLS streams
        xmlElement = XML.ElementFromURL(url = "http://premium.tv4play.se/api/web/asset/" + id + "/play?protocol=hls&videoFormat=MP4")
    except:
        pass

    if xmlElement:
        for item in xmlElement.xpath("//playback//items")[0]:
            base = item.xpath(".//base/text()")[0]
            clip = item.xpath(".//url/text()")[0]
            
            if base.startswith('http') and base.endswith('.m3u8'):
                    streams = GetHLSStreams(clip)

                    return IndirectResponse(
                        VideoClipObject,
                        key = HTTPLiveStreamURL(streams[0]['url'])
                    )

    # Add Webkit playback if we couldn't find a stream.
    return IndirectResponse(
        VideoClipObject,
        key = WebVideoURL("http://embed.tv4play.se/tv4play/syndication/v1/popout.html?vid=" + id)
    )

###########################################################
def GetHLSStreams(url):
    streams = []

    playList = HTTP.Request(url).content

    # Parse the m3u8 file to get:
    # - URL
    # - Resolution
    # - Bitrate
    for line in playList.splitlines():
        if "BANDWIDTH" in line:
            stream            = {}
            stream["bitrate"] = int(Regex('(?<=BANDWIDTH=)[0-9]+').search(line).group(0))        

            if "RESOLUTION" in line:
                stream["resolution"] = int(Regex('(?<=RESOLUTION=)[0-9]+x[0-9]+').search(line).group(0).split("x")[1])
            else:
                stream["resolution"] = 0

        elif ".m3u8" in line:
            if not line.startswith("http://"):
                path          = url[ : url.rfind('/') + 1]
                stream["url"] = path + line
                    
            streams.append(stream)
                
    sorted_streams = sorted(streams, key = lambda stream: stream["bitrate"], reverse = True)        

    return sorted_streams


